The tree is a hierarchical structure consisting of nodes and relations.

1. Nodes and Relations
1.1 Relations: Always start with a colon (:) followed by a string (e.g., :place, :wiki, :temporal). Relations serve as labeled edges connecting nodes.


1.2 Nodes: A node is the value assigned to a relation. Nodes can be one of four types:
1.2.1 Variable / Concept type 
A variable that follows a slash and a concept (e.g., s2p / publication-91).
Regex pattern: 
    variable_re = re.compile(r"^s[0-9]+[a-z]+[0-9]*")
    concept_re = re.compile(r"^[^\s\(\):]+") 
    variable_slash_concept_re = re.compile(r"^(?P<variable>s[0-9]+[a-z]+[0-9]*)\s*/\s*(?P<concept>[^\s\(\):]+)$")

1.2.2 Number: An integer or floating-point number (e.g., 2, 17, 2006).
Regex pattern:
    number_re = re.compile(r"^([0-9]+(?:\.[0-9]+)?)(\s|\)|$)")


1.2.3 Quoted String: A string enclosed in double quotes (e.g., "Tacloban", "Philippines").
Regex pattern:
    string_re = re.compile(r'^"([^"\s]+)"')

1.2.4 Unquoted String 
Has to be one of the following: [
    'habitual', 'generic', 'iterative', 'inceptive', 'imperfective', 'process', 'atelic-process', 'perfective', 'state', 'reversible-state', 'irreversible-state', 'inherent-state', 'point-state', 'activity', 'undirected-activity', 'directed-activity', 'endeavor', 'semelfactive', 'undirected-endeavor', 'directed-endeavor', 'performance', 'incremental-accomplishment', 'nonincremental-accomplishment', 'directed-achievement', 'reversible-directed-achievement', 'irreversible-directed-achievement',
    'intensifier', 'downtoner', 'equal',
    'full-affirmative', 'partial-affirmative', 'neutral-affirmative', 'neutral-negative', 'partial-negative', 'full-negative',
    'imperative', 'interrogative', 'expressive',
    '-', 'umr-unknown', 'truth-value',
    '+',
    'singular', 'non-singular', 'dual', 'paucal', 'plural', 'non-dual-paucal', 'greater-plural', 'trial', 'non-trial-paucal',
    '1st', '2nd', '3rd', '4th', 'non-3rd', 'non-1st', 'excl','incl',
    'class',
    'left-handed', 'right-handed',
    'absolute', 'intrinsic','relative', 
    'rotated', 'reflected'
]

2. Branches
A branch consists of a relation followed by a node, with optional subbranches attached to that node.
Example of a Branch:
:place (s2h / human-settlement :wiki "Tacloban"
    :name (s2n / name :op1 "Tacloban")
    :place (s2c2 / country :wiki "Philippines"
        :name (s2n2 / name :op1 "Philippines")))
:place is the relation.
(s2h / human-settlement â€¦) is the node (a variable/concept).
Inside s2h, there are subbranches like :wiki, :name, and :place.

3. Handling Multi-Line and Single-Line Branches
Multi-Line Branches: A relation followed by a node with nested subbranches.
Example:
:place (s2h / human-settlement
    :name (s2n / name :op1 "Tacloban")
    :place (s2c2 / country :wiki "Philippines"
        :name (s2n2 / name :op1 "Philippines")))
Single-Line Branches: A relation with a direct node that does not introduce subbranches.
Example:
:wiki "Tacloban"

4. Bracket Rules
Opening and Closing Parentheses
Parentheses () define a node with subbranches.
Every opening parenthesis must have a matching closing parenthesis.
Structure and Nesting: Each node with subbranches is enclosed within parentheses.
The outermost node starts and ends with parentheses.
Nested nodes have their own parentheses, which must be properly closed before closing the parent node.
If a branch is deleted, its corresponding parentheses must also be removed to maintain the structure. Example:
(s2p / publication-91
    :ARG3 (s2t / thing)
    :place (s2h / human-settlement :wiki "Tacloban"
        :name (s2n / name :op1 "Tacloban")
        :place (s2c2 / country :wiki "Philippines"
            :name (s2n2 / name :op1 "Philippines"))))
If we delete the :place (s2h / human-settlement ...) branch, we get:
(s2p / publication-91
    :ARG3 (s2t / thing))
All parentheses remain correctly matched.
